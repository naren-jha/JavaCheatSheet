Dinic's algorithm is one of those extremely fast and revolutionary algorithms which really pushed the field of network flow forwards. It was one if not the first algorithm to introduce a bunch of new concepts like building a level graph, combining multiple graph traversal techniques together, and the concept of a blocking flow.

Dinic's algorithm is a fast a strongly polynomial maximum flow algorithm. The fact that it's strongly polynomial is important, because it means that the runtime of the algorithm doesn't depend on the capacity values of the flow graph. Time complexity of Dinic's algorithm is O(EV2).

What's remarkable about Dinic's is that not only is it fast in practice for general graphs, but it boosts performance on bipartite graphs - running in a time complexity of O(âˆšVE) the importance of this cannot be overstated. It makes it possible to handle bipartite graphs of a ridiculous size. If you're doing competitive programming, Dinic's is the de facto standard algorithm to solve maximum flow problems.

The algorithm was conceived in 1969 by Yefim Dinitz and published in 1970. It was later modified slightly and popularized by Shimon Evan, mispronouncing Dinitz as Dinic's.

To understand the intuition behind the algorithm, let's begin by making an analogy. Suppose you and your friend are planning to meet up at a coffee shop - a few streets east of where you are.

You've never been to this coffee shop and you don't exactly know where it is. But you know it's somewhere East.

So how would you get there? With the information you have, would it make sense to South? what about North-West? Actually the only sensible directions are East, North-East and South-East.

This is because you know that those directions guarantee that you make a positive progress towards the coffee shop. This form of heuristic ensures that we continuously make progress towards whatever place of interest we desire to go.

So how can we apply this concept while solving the maximum flow problem? In this analogy YOU are the source node and the COFFEE SHOP is the sink. The main idea behind Dinic's algorithm is to guide augmenting paths from the source to the sink, using a level graph, and in doing so greatly reducing the runtime.

The way Dinic's determines what edges make progress towards the sink t, and which do not, is by building what's called a level graph. The levels of a graph are those obtained by doing a Breadth-First Search from the source. Furthermore, an edge is only part of the level graph if it makes progress towards the sink. That means an edge must go from a node at level L to another node at level L + 1.

The requirement that edges must go from L to L + 1 prunes backwards or what we can call sideways edges. Those are all the gray edges in the figure below.

As an example, if we're trying to get from s to t as quickly as possible, does it make sense to take the red edge going in the backwards direction (see figure below)? No! it does not. Taking the red edge doesn't bring us any closer to the sink, so it should only be taken if a detour is required. This is why backward edges are omitted from the level graph.

The same thing can be said about edges which cut across sideways, across the same level, since no progress is made.

It's also worth mentioning that residual edges can be made part of the level graph but they must have a remaining capacity greater than zero.

So that was the level graph. The actual steps to executing Dinic's are as follows -.

1. first construct a level graph by doing a Breadth-First Search from the source to label all the levels of the current flow graph.

2. if the sink was never reached while building the level graph, then we can stop and return the value of the maximum flow.

3. then using only valid edges in the level graph, do multiple Depth-First Searches from the source to the sink until a blocking flow is reached. And sum over the bottleneck values of all augmenting paths to calculate the maximum flow.

Then repeat steps 1 to 3.

A blocking flow is when we cannot find any more paths from the source to the sink because too many edges in the level graph have been saturated.

Now that we understand the algorithm on high level, let's clear things out with an example. Let's find maximum flow for the following flow graph using Dinic's algorithm. If this was a bipartite graph we would also be able to get a maximum matching as a result.

Step one is to figure out which edges are part of the current level graph. We don't need to think of the level graph as a totally separate graph. We can think of it as a subset of the edges.

So we start at the source and do a breadth-first search outwards. The first layer includes all the red nodes, second layer the green nodes and the third layer the purple nodes as shown in figure below.

Now if we focus on the edges which form the level graph, we can see that they are all the edges which go from L to L + 1 in level and have a remaining capacity > 0.

Step two of the algorithm is to find paths from s to t until a blocking flow is reached (i.e., when we cannot find any more paths through the level graph).

So we start at the source and do a Depth-First Search on the edges of level graph until the sink is reached.

Below figure shows our first augmenting path in the level graph. The bottleneck value along this path is 5, since 5 is the smallest remaining capacity.

So we update the flow values along the path by 5.

If we inspect the graph the blocking flow has not yet been reached, since there still exists paths from s to t.

So we start once again at the source and do a Depth-First Search forwards. Below figure shows another augmenting path from s to t. This one has a bottleneck value of 15.

So augment the flow along the path by 15 units.

Now let's try to find another path from s to t. What happens now is that we get stuck performing the Depth-First Search. There are no edges in the level graph with a remaining capacity > 0, which can lead us to the sink. So the blocking flow has been reached.

We just finished the first blocking flow iteration. Now we reset and rebuild the level graph. This time it should look different because the remaining capacities of multiple edges has changed.

We start at the source again, expand outwards taking all edges with a remaining capacity > 0, which in this case is only the middle edge leading us to the red node. The top edge going outwards from the source is saturated and so is the one going downwards.
We keep doing this and building the level graph layer by layer.

So this is our new level graph. We can see that this time we have one extra layer. let's try and find a path from s to t.

Once again, we start at the source and probe forwards using only the edges part of the level graph.

We have reached a dead end in our Depth-First Search. So what we need to do is backtrack and keep going until we reach the sink.

We made it to the sink. The current path has a bottleneck value of 10.

So we augment the flow by 10 units.

Now if we inspect the flow graph we notice that the blocking flow has once again been reached.

Now no more flow can be pushed through the network when we build a level graph. Which means the algorithm terminates.

The maximum flow is the sum of all the bottleneck values. Which in this case is = 5 + 15 + 10 = 30.

We can also compute the maximum flow by summing the flow values going into the sink.

One of the pitfalls of the current implementation of Dinic's algorithm is that it may encounter multiple dead ends during a Depth-First Search phase. This is especially bad if the same dead end is taken multiple times during a blocking flow iteration.

To resolve this issue, in his original paper, Dinitz suggested cleaning the level graph and getting rid of all the dead ends, before beginning with each blocking flow phase.

Then later in 1975 Shimon Evan suggested pruning dead ends when backtracking during the Depth-First Search phase, effectively getting rid of dead ends on the fly as the algorithm executes. This trick greatly speeds up and simplifies the algorithm because dead ends are only ever encountered once.

